import pandas as pd

class Preprocessing:
    def __init__(self, connector):
        self.connector = connector
        self.movies = None

    def load_data(self):
        """Load d·ªØ li·ªáu t·ª´ MySQL"""
        self.movies = self.connector.queryDataset("SELECT * FROM movies;")
        self.ratings = self.connector.queryDataset("SELECT * FROM ratings;")

        # Ki·ªÉm tra d·ªØ li·ªáu b·ªã None
        if self.movies is None:
            raise ValueError(
                "‚ö† L·ªói: Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu t·ª´ b·∫£ng 'movies'. Ki·ªÉm tra l·∫°i k·∫øt n·ªëi ho·∫∑c d·ªØ li·ªáu trong database!")

        if self.ratings is None:
            raise ValueError(
                "‚ö† L·ªói: Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu t·ª´ b·∫£ng 'ratings'. Ki·ªÉm tra l·∫°i k·∫øt n·ªëi ho·∫∑c d·ªØ li·ªáu trong database!")

        # Ki·ªÉm tra n·∫øu DataFrame r·ªóng
        if self.movies.empty:
            raise ValueError("‚ö† L·ªói: B·∫£ng 'movies' kh√¥ng c√≥ d·ªØ li·ªáu!")

        if self.ratings.empty:
            raise ValueError("‚ö† L·ªói: B·∫£ng 'ratings' kh√¥ng c√≥ d·ªØ li·ªáu!")

        print("‚úÖ Movies DataFrame:\n", self.movies.head())
        print("‚úÖ Ratings DataFrame:\n", self.ratings.head())

    def convert_data_types(self):
        """Chuy·ªÉn ƒë·ªïi ki·ªÉu d·ªØ li·ªáu"""
        self.movies['movieId'] = pd.to_numeric(self.movies['movieId'], errors='coerce')
        self.ratings['userId'] = pd.to_numeric(self.ratings['userId'], errors='coerce')
        self.ratings['movieId'] = pd.to_numeric(self.ratings['movieId'], errors='coerce')
        self.ratings['rating'] = pd.to_numeric(self.ratings['rating'], errors='coerce')

    def extract_year_from_title(self):
        """Tr√≠ch xu·∫•t nƒÉm ph√°t h√†nh t·ª´ ti√™u ƒë·ªÅ phim"""
        self.movies['release_year'] = self.movies['title'].str.extract(r'\((\d{4})\)')

    def timestamp_to_datetime(self):
        """Chuy·ªÉn ƒë·ªïi timestamp th√†nh datetime v√† tr√≠ch xu·∫•t th√¥ng tin"""
        self.ratings['timestamp'] = pd.to_datetime(self.ratings['timestamp'], unit='s')
        self.ratings['year'] = self.ratings['timestamp'].dt.year
        self.ratings['month'] = self.ratings['timestamp'].dt.month
        self.ratings['day_of_week'] = self.ratings['timestamp'].dt.dayofweek
        self.ratings['hour'] = self.ratings['timestamp'].dt.hour

    def calculate_elapsed_time(self):
        """T√≠nh kho·∫£ng th·ªùi gian t·ª´ nƒÉm hi·ªán t·∫°i ƒë·∫øn nƒÉm rating"""
        latest_timestamp = self.ratings['year'].max()
        self.ratings['elapsed_time'] = latest_timestamp - self.ratings['year']

    def clean_data(self):
        """Lo·∫°i b·ªè c·ªôt kh√¥ng c·∫ßn thi·∫øt"""
        self.ratings.drop(columns=['timestamp'], inplace=True)

    def process(self):
        """Th·ª±c hi·ªán t·∫•t c·∫£ c√°c b∆∞·ªõc ti·ªÅn x·ª≠ l√Ω"""
        print("üîç Ki·ªÉm tra self.movies tr∆∞·ªõc khi x·ª≠ l√Ω:", type(self.movies))
        print("üîç Ki·ªÉm tra self.ratings tr∆∞·ªõc khi x·ª≠ l√Ω:", type(self.ratings))

        if self.movies is None or self.ratings is None:
            raise ValueError("‚ùå L·ªói: self.movies ho·∫∑c self.ratings ƒë√£ b·ªã None tr∆∞·ªõc khi x·ª≠ l√Ω!")

        self.convert_data_types()
        self.extract_year_from_title()
        self.timestamp_to_datetime()
        self.calculate_elapsed_time()
        self.clean_data()

    def get_dataframes(self):
        """Tr·∫£ v·ªÅ hai DataFrame ƒë√£ x·ª≠ l√Ω"""
        return self.movies, self.ratings